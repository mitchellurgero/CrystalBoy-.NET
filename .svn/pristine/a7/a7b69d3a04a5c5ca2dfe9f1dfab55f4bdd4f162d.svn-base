#region Copyright Notice
// This file is part of CrystalBoy.
// Copyright © 2008-2011 Fabien Barbier
// 
// CrystalBoy is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// CrystalBoy is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:v4.0.30319
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace CrystalBoy.Core
{
	partial class Utility
	{
		static readonly OpcodeInfo[] opcodeInfoArray = {
			/* 0x00 */ new OpcodeInfo("NOP", 0, Operation.Nop, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x01 */ new OpcodeInfo("LD BC,${0:X4}", 2, Operation.Ld, Operand.Bc, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x02 */ new OpcodeInfo("LD (BC),A", 0, Operation.Ld, Operand.MemoryBc, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x03 */ new OpcodeInfo("INC BC", 0, Operation.Inc, Operand.Bc, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x04 */ new OpcodeInfo("INC B", 0, Operation.Inc, Operand.B, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x05 */ new OpcodeInfo("DEC B", 0, Operation.Dec, Operand.B, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x06 */ new OpcodeInfo("LD B,${0:X2}", 1, Operation.Ld, Operand.B, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x07 */ new OpcodeInfo("RLCA", 0, Operation.Rlca, Operand.None, Operand.None, 0, (Flags)240, (Flags)0, (Flags)224, 4, 0),
			/* 0x08 */ new OpcodeInfo("LD (${0:X4}),SP", 2, Operation.Ld, Operand.Memory, Operand.Sp, 0, (Flags)0, (Flags)0, (Flags)0, 20, 0),
			/* 0x09 */ new OpcodeInfo("ADD HL,BC", 0, Operation.Add, Operand.Hl, Operand.Bc, 0, (Flags)112, (Flags)0, (Flags)64, 8, 0),
			/* 0x0A */ new OpcodeInfo("LD A,(BC)", 0, Operation.Ld, Operand.A, Operand.MemoryBc, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x0B */ new OpcodeInfo("DEC BC", 0, Operation.Dec, Operand.Bc, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x0C */ new OpcodeInfo("INC C", 0, Operation.Inc, Operand.C, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x0D */ new OpcodeInfo("DEC C", 0, Operation.Dec, Operand.C, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x0E */ new OpcodeInfo("LD C,${0:X2}", 1, Operation.Ld, Operand.C, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x0F */ new OpcodeInfo("RRCA", 0, Operation.Rrca, Operand.None, Operand.None, 0, (Flags)240, (Flags)0, (Flags)224, 4, 0),
			/* 0x10 */ new OpcodeInfo("STOP", 0, Operation.Stop, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x11 */ new OpcodeInfo("LD DE,${0:X4}", 2, Operation.Ld, Operand.De, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x12 */ new OpcodeInfo("LD (DE),A", 0, Operation.Ld, Operand.MemoryDe, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x13 */ new OpcodeInfo("INC DE", 0, Operation.Inc, Operand.De, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x14 */ new OpcodeInfo("INC D", 0, Operation.Inc, Operand.D, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x15 */ new OpcodeInfo("DEC D", 0, Operation.Dec, Operand.D, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x16 */ new OpcodeInfo("LD D,${0:X2}", 1, Operation.Ld, Operand.D, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x17 */ new OpcodeInfo("RLA", 0, Operation.Rla, Operand.None, Operand.None, 0, (Flags)240, (Flags)0, (Flags)224, 4, 0),
			/* 0x18 */ new OpcodeInfo("JR ${0:X2}", 1, Operation.Jr, Operand.SByte, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x19 */ new OpcodeInfo("ADD HL,DE", 0, Operation.Add, Operand.Hl, Operand.De, 0, (Flags)112, (Flags)0, (Flags)64, 8, 0),
			/* 0x1A */ new OpcodeInfo("LD A,(DE)", 0, Operation.Ld, Operand.A, Operand.MemoryDe, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x1B */ new OpcodeInfo("DEC DE", 0, Operation.Dec, Operand.De, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x1C */ new OpcodeInfo("INC E", 0, Operation.Inc, Operand.E, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x1D */ new OpcodeInfo("DEC E", 0, Operation.Dec, Operand.E, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x1E */ new OpcodeInfo("LD E,${0:X2}", 1, Operation.Ld, Operand.E, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x1F */ new OpcodeInfo("RRA", 0, Operation.Rra, Operand.None, Operand.None, 0, (Flags)240, (Flags)0, (Flags)224, 4, 0),
			/* 0x20 */ new OpcodeInfo("JR NZ,${0:X2}", 1, Operation.Jr, Operand.NotZero, Operand.SByte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 4),
			/* 0x21 */ new OpcodeInfo("LD HL,${0:X4}", 2, Operation.Ld, Operand.Hl, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x22 */ new OpcodeInfo("LDI (HL),A", 0, Operation.Ldi, Operand.MemoryHl, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x23 */ new OpcodeInfo("INC HL", 0, Operation.Inc, Operand.Hl, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x24 */ new OpcodeInfo("INC H", 0, Operation.Inc, Operand.H, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x25 */ new OpcodeInfo("DEC H", 0, Operation.Dec, Operand.H, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x26 */ new OpcodeInfo("LD H,${0:X2}", 1, Operation.Ld, Operand.H, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x27 */ new OpcodeInfo("DAA", 0, Operation.Daa, Operand.None, Operand.None, 0, (Flags)176, (Flags)0, (Flags)32, 4, 0),
			/* 0x28 */ new OpcodeInfo("JR Z,${0:X2}", 1, Operation.Jr, Operand.Zero, Operand.SByte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 4),
			/* 0x29 */ new OpcodeInfo("ADD HL,HL", 0, Operation.Add, Operand.Hl, Operand.Hl, 0, (Flags)112, (Flags)0, (Flags)64, 8, 0),
			/* 0x2A */ new OpcodeInfo("LDI A,(HL)", 0, Operation.Ldi, Operand.A, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x2B */ new OpcodeInfo("DEC HL", 0, Operation.Dec, Operand.Hl, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x2C */ new OpcodeInfo("INC L", 0, Operation.Inc, Operand.L, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x2D */ new OpcodeInfo("DEC L", 0, Operation.Dec, Operand.L, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x2E */ new OpcodeInfo("LD L,${0:X2}", 1, Operation.Ld, Operand.L, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x2F */ new OpcodeInfo("CPL", 0, Operation.Cpl, Operand.None, Operand.None, 0, (Flags)96, (Flags)96, (Flags)0, 4, 0),
			/* 0x30 */ new OpcodeInfo("JR NC,${0:X2}", 1, Operation.Jr, Operand.NotCarry, Operand.SByte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 4),
			/* 0x31 */ new OpcodeInfo("LD SP,${0:X4}", 2, Operation.Ld, Operand.Sp, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x32 */ new OpcodeInfo("LDD (HL),A", 0, Operation.Ldd, Operand.MemoryHl, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x33 */ new OpcodeInfo("INC SP", 0, Operation.Inc, Operand.Sp, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x34 */ new OpcodeInfo("INC (HL)", 0, Operation.Inc, Operand.MemoryHl, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 12, 0),
			/* 0x35 */ new OpcodeInfo("DEC (HL)", 0, Operation.Dec, Operand.MemoryHl, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 12, 0),
			/* 0x36 */ new OpcodeInfo("LD (HL),${0:X2}", 1, Operation.Ld, Operand.MemoryHl, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0x37 */ new OpcodeInfo("SCF", 0, Operation.Scf, Operand.None, Operand.None, 0, (Flags)112, (Flags)16, (Flags)96, 4, 0),
			/* 0x38 */ new OpcodeInfo("JR C,${0:X2}", 1, Operation.Jr, Operand.Carry, Operand.SByte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 4),
			/* 0x39 */ new OpcodeInfo("ADD HL,SP", 0, Operation.Add, Operand.Hl, Operand.Sp, 0, (Flags)112, (Flags)0, (Flags)64, 8, 0),
			/* 0x3A */ new OpcodeInfo("LDD A,(HL)", 0, Operation.Ldd, Operand.A, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x3B */ new OpcodeInfo("DEC SP", 0, Operation.Dec, Operand.Sp, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x3C */ new OpcodeInfo("INC A", 0, Operation.Inc, Operand.A, Operand.None, 0, (Flags)224, (Flags)0, (Flags)64, 4, 0),
			/* 0x3D */ new OpcodeInfo("DEC A", 0, Operation.Dec, Operand.A, Operand.None, 0, (Flags)224, (Flags)64, (Flags)0, 4, 0),
			/* 0x3E */ new OpcodeInfo("LD A,${0:X2}", 1, Operation.Ld, Operand.A, Operand.Byte, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x3F */ new OpcodeInfo("CCF", 0, Operation.Ccf, Operand.None, Operand.None, 0, (Flags)112, (Flags)0, (Flags)96, 4, 0),
			/* 0x40 */ new OpcodeInfo("LD B,B", 0, Operation.Ld, Operand.B, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x41 */ new OpcodeInfo("LD B,C", 0, Operation.Ld, Operand.B, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x42 */ new OpcodeInfo("LD B,D", 0, Operation.Ld, Operand.B, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x43 */ new OpcodeInfo("LD B,E", 0, Operation.Ld, Operand.B, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x44 */ new OpcodeInfo("LD B,H", 0, Operation.Ld, Operand.B, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x45 */ new OpcodeInfo("LD B,L", 0, Operation.Ld, Operand.B, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x46 */ new OpcodeInfo("LD B,(HL)", 0, Operation.Ld, Operand.B, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x47 */ new OpcodeInfo("LD B,A", 0, Operation.Ld, Operand.B, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x48 */ new OpcodeInfo("LD C,B", 0, Operation.Ld, Operand.C, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x49 */ new OpcodeInfo("LD C,C", 0, Operation.Ld, Operand.C, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x4A */ new OpcodeInfo("LD C,D", 0, Operation.Ld, Operand.C, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x4B */ new OpcodeInfo("LD C,E", 0, Operation.Ld, Operand.C, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x4C */ new OpcodeInfo("LD C,H", 0, Operation.Ld, Operand.C, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x4D */ new OpcodeInfo("LD C,L", 0, Operation.Ld, Operand.C, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x4E */ new OpcodeInfo("LD C,(HL)", 0, Operation.Ld, Operand.C, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x4F */ new OpcodeInfo("LD C,A", 0, Operation.Ld, Operand.C, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x50 */ new OpcodeInfo("LD D,B", 0, Operation.Ld, Operand.D, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x51 */ new OpcodeInfo("LD D,C", 0, Operation.Ld, Operand.D, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x52 */ new OpcodeInfo("LD D,D", 0, Operation.Ld, Operand.D, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x53 */ new OpcodeInfo("LD D,E", 0, Operation.Ld, Operand.D, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x54 */ new OpcodeInfo("LD D,H", 0, Operation.Ld, Operand.D, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x55 */ new OpcodeInfo("LD D,L", 0, Operation.Ld, Operand.D, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x56 */ new OpcodeInfo("LD D,(HL)", 0, Operation.Ld, Operand.D, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x57 */ new OpcodeInfo("LD D,A", 0, Operation.Ld, Operand.D, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x58 */ new OpcodeInfo("LD E,B", 0, Operation.Ld, Operand.E, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x59 */ new OpcodeInfo("LD E,C", 0, Operation.Ld, Operand.E, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x5A */ new OpcodeInfo("LD E,D", 0, Operation.Ld, Operand.E, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x5B */ new OpcodeInfo("LD E,E", 0, Operation.Ld, Operand.E, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x5C */ new OpcodeInfo("LD E,H", 0, Operation.Ld, Operand.E, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x5D */ new OpcodeInfo("LD E,L", 0, Operation.Ld, Operand.E, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x5E */ new OpcodeInfo("LD E,(HL)", 0, Operation.Ld, Operand.E, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x5F */ new OpcodeInfo("LD E,A", 0, Operation.Ld, Operand.E, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x60 */ new OpcodeInfo("LD H,B", 0, Operation.Ld, Operand.H, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x61 */ new OpcodeInfo("LD H,C", 0, Operation.Ld, Operand.H, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x62 */ new OpcodeInfo("LD H,D", 0, Operation.Ld, Operand.H, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x63 */ new OpcodeInfo("LD H,E", 0, Operation.Ld, Operand.H, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x64 */ new OpcodeInfo("LD H,H", 0, Operation.Ld, Operand.H, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x65 */ new OpcodeInfo("LD H,L", 0, Operation.Ld, Operand.H, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x66 */ new OpcodeInfo("LD H,(HL)", 0, Operation.Ld, Operand.H, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x67 */ new OpcodeInfo("LD H,A", 0, Operation.Ld, Operand.H, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x68 */ new OpcodeInfo("LD L,B", 0, Operation.Ld, Operand.L, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x69 */ new OpcodeInfo("LD L,C", 0, Operation.Ld, Operand.L, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x6A */ new OpcodeInfo("LD L,D", 0, Operation.Ld, Operand.L, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x6B */ new OpcodeInfo("LD L,E", 0, Operation.Ld, Operand.L, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x6C */ new OpcodeInfo("LD L,H", 0, Operation.Ld, Operand.L, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x6D */ new OpcodeInfo("LD L,L", 0, Operation.Ld, Operand.L, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x6E */ new OpcodeInfo("LD L,(HL)", 0, Operation.Ld, Operand.L, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x6F */ new OpcodeInfo("LD L,A", 0, Operation.Ld, Operand.L, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x70 */ new OpcodeInfo("LD (HL),B", 0, Operation.Ld, Operand.MemoryHl, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x71 */ new OpcodeInfo("LD (HL),C", 0, Operation.Ld, Operand.MemoryHl, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x72 */ new OpcodeInfo("LD (HL),D", 0, Operation.Ld, Operand.MemoryHl, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x73 */ new OpcodeInfo("LD (HL),E", 0, Operation.Ld, Operand.MemoryHl, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x74 */ new OpcodeInfo("LD (HL),H", 0, Operation.Ld, Operand.MemoryHl, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x75 */ new OpcodeInfo("LD (HL),L", 0, Operation.Ld, Operand.MemoryHl, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x76 */ new OpcodeInfo("HALT", 0, Operation.Halt, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x77 */ new OpcodeInfo("LD (HL),A", 0, Operation.Ld, Operand.MemoryHl, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x78 */ new OpcodeInfo("LD A,B", 0, Operation.Ld, Operand.A, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x79 */ new OpcodeInfo("LD A,C", 0, Operation.Ld, Operand.A, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x7A */ new OpcodeInfo("LD A,D", 0, Operation.Ld, Operand.A, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x7B */ new OpcodeInfo("LD A,E", 0, Operation.Ld, Operand.A, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x7C */ new OpcodeInfo("LD A,H", 0, Operation.Ld, Operand.A, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x7D */ new OpcodeInfo("LD A,L", 0, Operation.Ld, Operand.A, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x7E */ new OpcodeInfo("LD A,(HL)", 0, Operation.Ld, Operand.A, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x7F */ new OpcodeInfo("LD A,A", 0, Operation.Ld, Operand.A, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0x80 */ new OpcodeInfo("ADD A,B", 0, Operation.Add, Operand.A, Operand.B, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x81 */ new OpcodeInfo("ADD A,C", 0, Operation.Add, Operand.A, Operand.C, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x82 */ new OpcodeInfo("ADD A,D", 0, Operation.Add, Operand.A, Operand.D, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x83 */ new OpcodeInfo("ADD A,E", 0, Operation.Add, Operand.A, Operand.E, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x84 */ new OpcodeInfo("ADD A,H", 0, Operation.Add, Operand.A, Operand.H, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x85 */ new OpcodeInfo("ADD A,L", 0, Operation.Add, Operand.A, Operand.L, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x86 */ new OpcodeInfo("ADD A,(HL)", 0, Operation.Add, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)0, (Flags)64, 8, 0),
			/* 0x87 */ new OpcodeInfo("ADD A,A", 0, Operation.Add, Operand.A, Operand.A, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x88 */ new OpcodeInfo("ADC A,B", 0, Operation.Adc, Operand.A, Operand.B, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x89 */ new OpcodeInfo("ADC A,C", 0, Operation.Adc, Operand.A, Operand.C, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x8A */ new OpcodeInfo("ADC A,D", 0, Operation.Adc, Operand.A, Operand.D, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x8B */ new OpcodeInfo("ADC A,E", 0, Operation.Adc, Operand.A, Operand.E, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x8C */ new OpcodeInfo("ADC A,H", 0, Operation.Adc, Operand.A, Operand.H, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x8D */ new OpcodeInfo("ADC A,L", 0, Operation.Adc, Operand.A, Operand.L, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x8E */ new OpcodeInfo("ADC A,(HL)", 0, Operation.Adc, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)0, (Flags)64, 8, 0),
			/* 0x8F */ new OpcodeInfo("ADC A,A", 0, Operation.Adc, Operand.A, Operand.A, 0, (Flags)240, (Flags)0, (Flags)64, 4, 0),
			/* 0x90 */ new OpcodeInfo("SUB A,B", 0, Operation.Sub, Operand.A, Operand.B, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x91 */ new OpcodeInfo("SUB A,C", 0, Operation.Sub, Operand.A, Operand.C, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x92 */ new OpcodeInfo("SUB A,D", 0, Operation.Sub, Operand.A, Operand.D, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x93 */ new OpcodeInfo("SUB A,E", 0, Operation.Sub, Operand.A, Operand.E, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x94 */ new OpcodeInfo("SUB A,H", 0, Operation.Sub, Operand.A, Operand.H, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x95 */ new OpcodeInfo("SUB A,L", 0, Operation.Sub, Operand.A, Operand.L, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x96 */ new OpcodeInfo("SUB A,(HL)", 0, Operation.Sub, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0x97 */ new OpcodeInfo("SUB A,A", 0, Operation.Sub, Operand.A, Operand.A, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x98 */ new OpcodeInfo("SBC A,B", 0, Operation.Sbc, Operand.A, Operand.B, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x99 */ new OpcodeInfo("SBC A,C", 0, Operation.Sbc, Operand.A, Operand.C, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x9A */ new OpcodeInfo("SBC A,D", 0, Operation.Sbc, Operand.A, Operand.D, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x9B */ new OpcodeInfo("SBC A,E", 0, Operation.Sbc, Operand.A, Operand.E, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x9C */ new OpcodeInfo("SBC A,H", 0, Operation.Sbc, Operand.A, Operand.H, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x9D */ new OpcodeInfo("SBC A,L", 0, Operation.Sbc, Operand.A, Operand.L, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0x9E */ new OpcodeInfo("SBC A,(HL)", 0, Operation.Sbc, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0x9F */ new OpcodeInfo("SBC A,A", 0, Operation.Sbc, Operand.A, Operand.A, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xA0 */ new OpcodeInfo("AND A,B", 0, Operation.And, Operand.A, Operand.B, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA1 */ new OpcodeInfo("AND A,C", 0, Operation.And, Operand.A, Operand.C, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA2 */ new OpcodeInfo("AND A,D", 0, Operation.And, Operand.A, Operand.D, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA3 */ new OpcodeInfo("AND A,E", 0, Operation.And, Operand.A, Operand.E, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA4 */ new OpcodeInfo("AND A,H", 0, Operation.And, Operand.A, Operand.H, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA5 */ new OpcodeInfo("AND A,L", 0, Operation.And, Operand.A, Operand.L, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA6 */ new OpcodeInfo("AND A,(HL)", 0, Operation.And, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)32, (Flags)80, 8, 0),
			/* 0xA7 */ new OpcodeInfo("AND A,A", 0, Operation.And, Operand.A, Operand.A, 0, (Flags)240, (Flags)32, (Flags)80, 4, 0),
			/* 0xA8 */ new OpcodeInfo("XOR A,B", 0, Operation.Xor, Operand.A, Operand.B, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xA9 */ new OpcodeInfo("XOR A,C", 0, Operation.Xor, Operand.A, Operand.C, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xAA */ new OpcodeInfo("XOR A,D", 0, Operation.Xor, Operand.A, Operand.D, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xAB */ new OpcodeInfo("XOR A,E", 0, Operation.Xor, Operand.A, Operand.E, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xAC */ new OpcodeInfo("XOR A,H", 0, Operation.Xor, Operand.A, Operand.H, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xAD */ new OpcodeInfo("XOR A,L", 0, Operation.Xor, Operand.A, Operand.L, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xAE */ new OpcodeInfo("XOR A,(HL)", 0, Operation.Xor, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0xAF */ new OpcodeInfo("XOR A,A", 0, Operation.Xor, Operand.A, Operand.A, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB0 */ new OpcodeInfo("OR A,B", 0, Operation.Or, Operand.A, Operand.B, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB1 */ new OpcodeInfo("OR A,C", 0, Operation.Or, Operand.A, Operand.C, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB2 */ new OpcodeInfo("OR A,D", 0, Operation.Or, Operand.A, Operand.D, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB3 */ new OpcodeInfo("OR A,E", 0, Operation.Or, Operand.A, Operand.E, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB4 */ new OpcodeInfo("OR A,H", 0, Operation.Or, Operand.A, Operand.H, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB5 */ new OpcodeInfo("OR A,L", 0, Operation.Or, Operand.A, Operand.L, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB6 */ new OpcodeInfo("OR A,(HL)", 0, Operation.Or, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0xB7 */ new OpcodeInfo("OR A,A", 0, Operation.Or, Operand.A, Operand.A, 0, (Flags)240, (Flags)0, (Flags)112, 4, 0),
			/* 0xB8 */ new OpcodeInfo("CP A,B", 0, Operation.Cp, Operand.A, Operand.B, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xB9 */ new OpcodeInfo("CP A,C", 0, Operation.Cp, Operand.A, Operand.C, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xBA */ new OpcodeInfo("CP A,D", 0, Operation.Cp, Operand.A, Operand.D, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xBB */ new OpcodeInfo("CP A,E", 0, Operation.Cp, Operand.A, Operand.E, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xBC */ new OpcodeInfo("CP A,H", 0, Operation.Cp, Operand.A, Operand.H, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xBD */ new OpcodeInfo("CP A,L", 0, Operation.Cp, Operand.A, Operand.L, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xBE */ new OpcodeInfo("CP A,(HL)", 0, Operation.Cp, Operand.A, Operand.MemoryHl, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0xBF */ new OpcodeInfo("CP A,A", 0, Operation.Cp, Operand.A, Operand.A, 0, (Flags)240, (Flags)64, (Flags)0, 4, 0),
			/* 0xC0 */ new OpcodeInfo("RET NZ", 0, Operation.Ret, Operand.NotZero, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 12),
			/* 0xC1 */ new OpcodeInfo("POP BC", 0, Operation.Pop, Operand.Bc, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0xC2 */ new OpcodeInfo("JP NZ,${0:X4}", 2, Operation.Jp, Operand.NotZero, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 4),
			/* 0xC3 */ new OpcodeInfo("JP ${0:X4}", 2, Operation.Jp, Operand.Word, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xC4 */ new OpcodeInfo("CALL NZ,${0:X4}", 2, Operation.Call, Operand.NotZero, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 12),
			/* 0xC5 */ new OpcodeInfo("PUSH BC", 0, Operation.Push, Operand.Bc, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xC6 */ new OpcodeInfo("ADD A,${0:X2}", 1, Operation.Add, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)0, (Flags)64, 8, 0),
			/* 0xC7 */ new OpcodeInfo("RST $00", 0, Operation.Rst, Operand.Embedded, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xC8 */ new OpcodeInfo("RET Z", 0, Operation.Ret, Operand.Zero, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 12),
			/* 0xC9 */ new OpcodeInfo("RET", 0, Operation.Ret, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xCA */ new OpcodeInfo("JP Z,${0:X4}", 2, Operation.Jp, Operand.Zero, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 4),
			/* 0xCB */ OpcodeInfo.Invalid,
			/* 0xCC */ new OpcodeInfo("CALL Z,${0:X4}", 2, Operation.Call, Operand.Zero, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 12),
			/* 0xCD */ new OpcodeInfo("CALL ${0:X4}", 2, Operation.Call, Operand.Word, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 24, 0),
			/* 0xCE */ new OpcodeInfo("ADC A,${0:X2}", 1, Operation.Adc, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)0, (Flags)64, 8, 0),
			/* 0xCF */ new OpcodeInfo("RST $08", 0, Operation.Rst, Operand.Embedded, Operand.None, 8, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xD0 */ new OpcodeInfo("RET NC", 0, Operation.Ret, Operand.NotCarry, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 12),
			/* 0xD1 */ new OpcodeInfo("POP DE", 0, Operation.Pop, Operand.De, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0xD2 */ new OpcodeInfo("JP NC,${0:X4}", 2, Operation.Jp, Operand.NotCarry, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 4),
			/* 0xD3 */ OpcodeInfo.Invalid,
			/* 0xD4 */ new OpcodeInfo("CALL NC,${0:X4}", 2, Operation.Call, Operand.NotCarry, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 12),
			/* 0xD5 */ new OpcodeInfo("PUSH DE", 0, Operation.Push, Operand.De, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xD6 */ new OpcodeInfo("SUB A,${0:X2}", 1, Operation.Sub, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0xD7 */ new OpcodeInfo("RST $10", 0, Operation.Rst, Operand.Embedded, Operand.None, 16, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xD8 */ new OpcodeInfo("RET C", 0, Operation.Ret, Operand.Carry, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 8, 12),
			/* 0xD9 */ new OpcodeInfo("RETI", 0, Operation.Reti, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xDA */ new OpcodeInfo("JP C,${0:X4}", 2, Operation.Jp, Operand.Carry, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 4),
			/* 0xDB */ OpcodeInfo.Invalid,
			/* 0xDC */ new OpcodeInfo("CALL C,${0:X4}", 2, Operation.Call, Operand.Carry, Operand.Word, 0, (Flags)0, (Flags)0, (Flags)0, 12, 12),
			/* 0xDD */ OpcodeInfo.Invalid,
			/* 0xDE */ new OpcodeInfo("SBC A,${0:X2}", 1, Operation.Sbc, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0xDF */ new OpcodeInfo("RST $18", 0, Operation.Rst, Operand.Embedded, Operand.None, 24, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xE0 */ new OpcodeInfo("LD ($FF{0:X2}),A", 1, Operation.Ld, Operand.BytePort, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0xE1 */ new OpcodeInfo("POP HL", 0, Operation.Pop, Operand.Hl, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0xE2 */ new OpcodeInfo("LD (C),A", 0, Operation.Ld, Operand.RegisterPort, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE3 */ OpcodeInfo.Invalid,
			/* 0xE4 */ OpcodeInfo.Invalid,
			/* 0xE5 */ new OpcodeInfo("PUSH HL", 0, Operation.Push, Operand.Hl, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xE6 */ new OpcodeInfo("AND A,${0:X2}", 1, Operation.And, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)32, (Flags)80, 8, 0),
			/* 0xE7 */ new OpcodeInfo("RST $20", 0, Operation.Rst, Operand.Embedded, Operand.None, 32, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xE8 */ new OpcodeInfo("ADD SP,${0:X2}", 1, Operation.Add, Operand.Sp, Operand.SByte, 0, (Flags)240, (Flags)0, (Flags)192, 16, 0),
			/* 0xE9 */ new OpcodeInfo("JP HL", 0, Operation.Jp, Operand.Hl, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0xEA */ new OpcodeInfo("LD (${0:X4}),A", 2, Operation.Ld, Operand.Memory, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xEB */ OpcodeInfo.Invalid,
			/* 0xEC */ OpcodeInfo.Invalid,
			/* 0xED */ OpcodeInfo.Invalid,
			/* 0xEE */ new OpcodeInfo("XOR A,${0:X2}", 1, Operation.Xor, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0xEF */ new OpcodeInfo("RST $28", 0, Operation.Rst, Operand.Embedded, Operand.None, 40, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xF0 */ new OpcodeInfo("LD A,($FF{0:X2})", 1, Operation.Ld, Operand.A, Operand.BytePort, 0, (Flags)0, (Flags)0, (Flags)0, 12, 0),
			/* 0xF1 */ new OpcodeInfo("POP AF", 0, Operation.Pop, Operand.Af, Operand.None, 0, (Flags)240, (Flags)0, (Flags)0, 12, 0),
			/* 0xF2 */ new OpcodeInfo("LD A,(C)", 0, Operation.Ld, Operand.A, Operand.RegisterPort, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF3 */ new OpcodeInfo("DI", 0, Operation.Di, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0xF4 */ OpcodeInfo.Invalid,
			/* 0xF5 */ new OpcodeInfo("PUSH AF", 0, Operation.Push, Operand.Af, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xF6 */ new OpcodeInfo("OR A,${0:X2}", 1, Operation.Or, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0xF7 */ new OpcodeInfo("RST $30", 0, Operation.Rst, Operand.Embedded, Operand.None, 48, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xF8 */ new OpcodeInfo("LD HL,SP+${0:X2}", 1, Operation.Ld, Operand.Hl, Operand.StackRelative, 0, (Flags)240, (Flags)0, (Flags)192, 12, 0),
			/* 0xF9 */ new OpcodeInfo("LD SP,HL", 0, Operation.Ld, Operand.Sp, Operand.Hl, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFA */ new OpcodeInfo("LD A,(${0:X4})", 2, Operation.Ld, Operand.A, Operand.Memory, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xFB */ new OpcodeInfo("EI", 0, Operation.Ei, Operand.None, Operand.None, 0, (Flags)0, (Flags)0, (Flags)0, 4, 0),
			/* 0xFC */ OpcodeInfo.Invalid,
			/* 0xFD */ OpcodeInfo.Invalid,
			/* 0xFE */ new OpcodeInfo("CP A,${0:X2}", 1, Operation.Cp, Operand.A, Operand.Byte, 0, (Flags)240, (Flags)64, (Flags)0, 8, 0),
			/* 0xFF */ new OpcodeInfo("RST $38", 0, Operation.Rst, Operand.Embedded, Operand.None, 56, (Flags)0, (Flags)0, (Flags)0, 16, 0),
		};

		static readonly OpcodeInfo[] extendedOpcodeInfoArray = {
			/* 0x00 */ new OpcodeInfo("RLC B", 0, Operation.Rlc, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x01 */ new OpcodeInfo("RLC C", 0, Operation.Rlc, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x02 */ new OpcodeInfo("RLC D", 0, Operation.Rlc, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x03 */ new OpcodeInfo("RLC E", 0, Operation.Rlc, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x04 */ new OpcodeInfo("RLC H", 0, Operation.Rlc, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x05 */ new OpcodeInfo("RLC L", 0, Operation.Rlc, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x06 */ new OpcodeInfo("RLC (HL)", 0, Operation.Rlc, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x07 */ new OpcodeInfo("RLC A", 0, Operation.Rlc, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x08 */ new OpcodeInfo("RRC B", 0, Operation.Rrc, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x09 */ new OpcodeInfo("RRC C", 0, Operation.Rrc, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x0A */ new OpcodeInfo("RRC D", 0, Operation.Rrc, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x0B */ new OpcodeInfo("RRC E", 0, Operation.Rrc, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x0C */ new OpcodeInfo("RRC H", 0, Operation.Rrc, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x0D */ new OpcodeInfo("RRC L", 0, Operation.Rrc, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x0E */ new OpcodeInfo("RRC (HL)", 0, Operation.Rrc, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x0F */ new OpcodeInfo("RRC A", 0, Operation.Rrc, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x10 */ new OpcodeInfo("RL B", 0, Operation.Rl, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x11 */ new OpcodeInfo("RL C", 0, Operation.Rl, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x12 */ new OpcodeInfo("RL D", 0, Operation.Rl, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x13 */ new OpcodeInfo("RL E", 0, Operation.Rl, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x14 */ new OpcodeInfo("RL H", 0, Operation.Rl, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x15 */ new OpcodeInfo("RL L", 0, Operation.Rl, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x16 */ new OpcodeInfo("RL (HL)", 0, Operation.Rl, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x17 */ new OpcodeInfo("RL A", 0, Operation.Rl, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x18 */ new OpcodeInfo("RR B", 0, Operation.Rr, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x19 */ new OpcodeInfo("RR C", 0, Operation.Rr, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x1A */ new OpcodeInfo("RR D", 0, Operation.Rr, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x1B */ new OpcodeInfo("RR E", 0, Operation.Rr, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x1C */ new OpcodeInfo("RR H", 0, Operation.Rr, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x1D */ new OpcodeInfo("RR L", 0, Operation.Rr, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x1E */ new OpcodeInfo("RR (HL)", 0, Operation.Rr, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x1F */ new OpcodeInfo("RR A", 0, Operation.Rr, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x20 */ new OpcodeInfo("SLA B", 0, Operation.Sla, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x21 */ new OpcodeInfo("SLA C", 0, Operation.Sla, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x22 */ new OpcodeInfo("SLA D", 0, Operation.Sla, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x23 */ new OpcodeInfo("SLA E", 0, Operation.Sla, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x24 */ new OpcodeInfo("SLA H", 0, Operation.Sla, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x25 */ new OpcodeInfo("SLA L", 0, Operation.Sla, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x26 */ new OpcodeInfo("SLA (HL)", 0, Operation.Sla, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x27 */ new OpcodeInfo("SLA A", 0, Operation.Sla, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x28 */ new OpcodeInfo("SRA B", 0, Operation.Sra, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x29 */ new OpcodeInfo("SRA C", 0, Operation.Sra, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x2A */ new OpcodeInfo("SRA D", 0, Operation.Sra, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x2B */ new OpcodeInfo("SRA E", 0, Operation.Sra, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x2C */ new OpcodeInfo("SRA H", 0, Operation.Sra, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x2D */ new OpcodeInfo("SRA L", 0, Operation.Sra, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x2E */ new OpcodeInfo("SRA (HL)", 0, Operation.Sra, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x2F */ new OpcodeInfo("SRA A", 0, Operation.Sra, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x30 */ new OpcodeInfo("SWAP B", 0, Operation.Swap, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x31 */ new OpcodeInfo("SWAP C", 0, Operation.Swap, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x32 */ new OpcodeInfo("SWAP D", 0, Operation.Swap, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x33 */ new OpcodeInfo("SWAP E", 0, Operation.Swap, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x34 */ new OpcodeInfo("SWAP H", 0, Operation.Swap, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x35 */ new OpcodeInfo("SWAP L", 0, Operation.Swap, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x36 */ new OpcodeInfo("SWAP (HL)", 0, Operation.Swap, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 16, 0),
			/* 0x37 */ new OpcodeInfo("SWAP A", 0, Operation.Swap, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)112, 8, 0),
			/* 0x38 */ new OpcodeInfo("SRL B", 0, Operation.Srl, Operand.B, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x39 */ new OpcodeInfo("SRL C", 0, Operation.Srl, Operand.C, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x3A */ new OpcodeInfo("SRL D", 0, Operation.Srl, Operand.D, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x3B */ new OpcodeInfo("SRL E", 0, Operation.Srl, Operand.E, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x3C */ new OpcodeInfo("SRL H", 0, Operation.Srl, Operand.H, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x3D */ new OpcodeInfo("SRL L", 0, Operation.Srl, Operand.L, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x3E */ new OpcodeInfo("SRL (HL)", 0, Operation.Srl, Operand.MemoryHl, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 16, 0),
			/* 0x3F */ new OpcodeInfo("SRL A", 0, Operation.Srl, Operand.A, Operand.None, 0, (Flags)240, (Flags)0, (Flags)96, 8, 0),
			/* 0x40 */ new OpcodeInfo("BIT 0,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x41 */ new OpcodeInfo("BIT 0,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x42 */ new OpcodeInfo("BIT 0,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x43 */ new OpcodeInfo("BIT 0,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x44 */ new OpcodeInfo("BIT 0,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x45 */ new OpcodeInfo("BIT 0,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x46 */ new OpcodeInfo("BIT 0,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 0, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x47 */ new OpcodeInfo("BIT 0,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 0, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x48 */ new OpcodeInfo("BIT 1,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x49 */ new OpcodeInfo("BIT 1,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x4A */ new OpcodeInfo("BIT 1,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x4B */ new OpcodeInfo("BIT 1,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x4C */ new OpcodeInfo("BIT 1,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x4D */ new OpcodeInfo("BIT 1,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x4E */ new OpcodeInfo("BIT 1,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 1, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x4F */ new OpcodeInfo("BIT 1,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 1, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x50 */ new OpcodeInfo("BIT 2,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x51 */ new OpcodeInfo("BIT 2,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x52 */ new OpcodeInfo("BIT 2,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x53 */ new OpcodeInfo("BIT 2,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x54 */ new OpcodeInfo("BIT 2,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x55 */ new OpcodeInfo("BIT 2,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x56 */ new OpcodeInfo("BIT 2,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 2, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x57 */ new OpcodeInfo("BIT 2,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 2, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x58 */ new OpcodeInfo("BIT 3,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x59 */ new OpcodeInfo("BIT 3,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x5A */ new OpcodeInfo("BIT 3,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x5B */ new OpcodeInfo("BIT 3,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x5C */ new OpcodeInfo("BIT 3,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x5D */ new OpcodeInfo("BIT 3,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x5E */ new OpcodeInfo("BIT 3,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 3, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x5F */ new OpcodeInfo("BIT 3,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 3, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x60 */ new OpcodeInfo("BIT 4,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x61 */ new OpcodeInfo("BIT 4,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x62 */ new OpcodeInfo("BIT 4,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x63 */ new OpcodeInfo("BIT 4,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x64 */ new OpcodeInfo("BIT 4,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x65 */ new OpcodeInfo("BIT 4,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x66 */ new OpcodeInfo("BIT 4,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 4, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x67 */ new OpcodeInfo("BIT 4,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 4, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x68 */ new OpcodeInfo("BIT 5,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x69 */ new OpcodeInfo("BIT 5,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x6A */ new OpcodeInfo("BIT 5,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x6B */ new OpcodeInfo("BIT 5,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x6C */ new OpcodeInfo("BIT 5,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x6D */ new OpcodeInfo("BIT 5,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x6E */ new OpcodeInfo("BIT 5,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 5, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x6F */ new OpcodeInfo("BIT 5,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 5, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x70 */ new OpcodeInfo("BIT 6,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x71 */ new OpcodeInfo("BIT 6,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x72 */ new OpcodeInfo("BIT 6,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x73 */ new OpcodeInfo("BIT 6,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x74 */ new OpcodeInfo("BIT 6,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x75 */ new OpcodeInfo("BIT 6,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x76 */ new OpcodeInfo("BIT 6,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 6, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x77 */ new OpcodeInfo("BIT 6,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 6, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x78 */ new OpcodeInfo("BIT 7,B", 0, Operation.Bit, Operand.Embedded, Operand.B, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x79 */ new OpcodeInfo("BIT 7,C", 0, Operation.Bit, Operand.Embedded, Operand.C, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x7A */ new OpcodeInfo("BIT 7,D", 0, Operation.Bit, Operand.Embedded, Operand.D, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x7B */ new OpcodeInfo("BIT 7,E", 0, Operation.Bit, Operand.Embedded, Operand.E, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x7C */ new OpcodeInfo("BIT 7,H", 0, Operation.Bit, Operand.Embedded, Operand.H, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x7D */ new OpcodeInfo("BIT 7,L", 0, Operation.Bit, Operand.Embedded, Operand.L, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x7E */ new OpcodeInfo("BIT 7,(HL)", 0, Operation.Bit, Operand.Embedded, Operand.MemoryHl, 7, (Flags)224, (Flags)32, (Flags)64, 12, 0),
			/* 0x7F */ new OpcodeInfo("BIT 7,A", 0, Operation.Bit, Operand.Embedded, Operand.A, 7, (Flags)224, (Flags)32, (Flags)64, 8, 0),
			/* 0x80 */ new OpcodeInfo("RES 0,B", 0, Operation.Res, Operand.Embedded, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x81 */ new OpcodeInfo("RES 0,C", 0, Operation.Res, Operand.Embedded, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x82 */ new OpcodeInfo("RES 0,D", 0, Operation.Res, Operand.Embedded, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x83 */ new OpcodeInfo("RES 0,E", 0, Operation.Res, Operand.Embedded, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x84 */ new OpcodeInfo("RES 0,H", 0, Operation.Res, Operand.Embedded, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x85 */ new OpcodeInfo("RES 0,L", 0, Operation.Res, Operand.Embedded, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x86 */ new OpcodeInfo("RES 0,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0x87 */ new OpcodeInfo("RES 0,A", 0, Operation.Res, Operand.Embedded, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x88 */ new OpcodeInfo("RES 1,B", 0, Operation.Res, Operand.Embedded, Operand.B, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x89 */ new OpcodeInfo("RES 1,C", 0, Operation.Res, Operand.Embedded, Operand.C, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x8A */ new OpcodeInfo("RES 1,D", 0, Operation.Res, Operand.Embedded, Operand.D, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x8B */ new OpcodeInfo("RES 1,E", 0, Operation.Res, Operand.Embedded, Operand.E, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x8C */ new OpcodeInfo("RES 1,H", 0, Operation.Res, Operand.Embedded, Operand.H, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x8D */ new OpcodeInfo("RES 1,L", 0, Operation.Res, Operand.Embedded, Operand.L, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x8E */ new OpcodeInfo("RES 1,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 1, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0x8F */ new OpcodeInfo("RES 1,A", 0, Operation.Res, Operand.Embedded, Operand.A, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x90 */ new OpcodeInfo("RES 2,B", 0, Operation.Res, Operand.Embedded, Operand.B, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x91 */ new OpcodeInfo("RES 2,C", 0, Operation.Res, Operand.Embedded, Operand.C, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x92 */ new OpcodeInfo("RES 2,D", 0, Operation.Res, Operand.Embedded, Operand.D, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x93 */ new OpcodeInfo("RES 2,E", 0, Operation.Res, Operand.Embedded, Operand.E, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x94 */ new OpcodeInfo("RES 2,H", 0, Operation.Res, Operand.Embedded, Operand.H, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x95 */ new OpcodeInfo("RES 2,L", 0, Operation.Res, Operand.Embedded, Operand.L, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x96 */ new OpcodeInfo("RES 2,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 2, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0x97 */ new OpcodeInfo("RES 2,A", 0, Operation.Res, Operand.Embedded, Operand.A, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x98 */ new OpcodeInfo("RES 3,B", 0, Operation.Res, Operand.Embedded, Operand.B, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x99 */ new OpcodeInfo("RES 3,C", 0, Operation.Res, Operand.Embedded, Operand.C, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x9A */ new OpcodeInfo("RES 3,D", 0, Operation.Res, Operand.Embedded, Operand.D, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x9B */ new OpcodeInfo("RES 3,E", 0, Operation.Res, Operand.Embedded, Operand.E, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x9C */ new OpcodeInfo("RES 3,H", 0, Operation.Res, Operand.Embedded, Operand.H, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x9D */ new OpcodeInfo("RES 3,L", 0, Operation.Res, Operand.Embedded, Operand.L, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0x9E */ new OpcodeInfo("RES 3,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 3, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0x9F */ new OpcodeInfo("RES 3,A", 0, Operation.Res, Operand.Embedded, Operand.A, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA0 */ new OpcodeInfo("RES 4,B", 0, Operation.Res, Operand.Embedded, Operand.B, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA1 */ new OpcodeInfo("RES 4,C", 0, Operation.Res, Operand.Embedded, Operand.C, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA2 */ new OpcodeInfo("RES 4,D", 0, Operation.Res, Operand.Embedded, Operand.D, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA3 */ new OpcodeInfo("RES 4,E", 0, Operation.Res, Operand.Embedded, Operand.E, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA4 */ new OpcodeInfo("RES 4,H", 0, Operation.Res, Operand.Embedded, Operand.H, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA5 */ new OpcodeInfo("RES 4,L", 0, Operation.Res, Operand.Embedded, Operand.L, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA6 */ new OpcodeInfo("RES 4,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 4, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xA7 */ new OpcodeInfo("RES 4,A", 0, Operation.Res, Operand.Embedded, Operand.A, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA8 */ new OpcodeInfo("RES 5,B", 0, Operation.Res, Operand.Embedded, Operand.B, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xA9 */ new OpcodeInfo("RES 5,C", 0, Operation.Res, Operand.Embedded, Operand.C, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xAA */ new OpcodeInfo("RES 5,D", 0, Operation.Res, Operand.Embedded, Operand.D, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xAB */ new OpcodeInfo("RES 5,E", 0, Operation.Res, Operand.Embedded, Operand.E, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xAC */ new OpcodeInfo("RES 5,H", 0, Operation.Res, Operand.Embedded, Operand.H, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xAD */ new OpcodeInfo("RES 5,L", 0, Operation.Res, Operand.Embedded, Operand.L, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xAE */ new OpcodeInfo("RES 5,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 5, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xAF */ new OpcodeInfo("RES 5,A", 0, Operation.Res, Operand.Embedded, Operand.A, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB0 */ new OpcodeInfo("RES 6,B", 0, Operation.Res, Operand.Embedded, Operand.B, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB1 */ new OpcodeInfo("RES 6,C", 0, Operation.Res, Operand.Embedded, Operand.C, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB2 */ new OpcodeInfo("RES 6,D", 0, Operation.Res, Operand.Embedded, Operand.D, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB3 */ new OpcodeInfo("RES 6,E", 0, Operation.Res, Operand.Embedded, Operand.E, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB4 */ new OpcodeInfo("RES 6,H", 0, Operation.Res, Operand.Embedded, Operand.H, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB5 */ new OpcodeInfo("RES 6,L", 0, Operation.Res, Operand.Embedded, Operand.L, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB6 */ new OpcodeInfo("RES 6,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 6, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xB7 */ new OpcodeInfo("RES 6,A", 0, Operation.Res, Operand.Embedded, Operand.A, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB8 */ new OpcodeInfo("RES 7,B", 0, Operation.Res, Operand.Embedded, Operand.B, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xB9 */ new OpcodeInfo("RES 7,C", 0, Operation.Res, Operand.Embedded, Operand.C, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xBA */ new OpcodeInfo("RES 7,D", 0, Operation.Res, Operand.Embedded, Operand.D, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xBB */ new OpcodeInfo("RES 7,E", 0, Operation.Res, Operand.Embedded, Operand.E, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xBC */ new OpcodeInfo("RES 7,H", 0, Operation.Res, Operand.Embedded, Operand.H, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xBD */ new OpcodeInfo("RES 7,L", 0, Operation.Res, Operand.Embedded, Operand.L, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xBE */ new OpcodeInfo("RES 7,(HL)", 0, Operation.Res, Operand.Embedded, Operand.MemoryHl, 7, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xBF */ new OpcodeInfo("RES 7,A", 0, Operation.Res, Operand.Embedded, Operand.A, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC0 */ new OpcodeInfo("SET 0,B", 0, Operation.Set, Operand.Embedded, Operand.B, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC1 */ new OpcodeInfo("SET 0,C", 0, Operation.Set, Operand.Embedded, Operand.C, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC2 */ new OpcodeInfo("SET 0,D", 0, Operation.Set, Operand.Embedded, Operand.D, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC3 */ new OpcodeInfo("SET 0,E", 0, Operation.Set, Operand.Embedded, Operand.E, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC4 */ new OpcodeInfo("SET 0,H", 0, Operation.Set, Operand.Embedded, Operand.H, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC5 */ new OpcodeInfo("SET 0,L", 0, Operation.Set, Operand.Embedded, Operand.L, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC6 */ new OpcodeInfo("SET 0,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 0, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xC7 */ new OpcodeInfo("SET 0,A", 0, Operation.Set, Operand.Embedded, Operand.A, 0, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC8 */ new OpcodeInfo("SET 1,B", 0, Operation.Set, Operand.Embedded, Operand.B, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xC9 */ new OpcodeInfo("SET 1,C", 0, Operation.Set, Operand.Embedded, Operand.C, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xCA */ new OpcodeInfo("SET 1,D", 0, Operation.Set, Operand.Embedded, Operand.D, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xCB */ new OpcodeInfo("SET 1,E", 0, Operation.Set, Operand.Embedded, Operand.E, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xCC */ new OpcodeInfo("SET 1,H", 0, Operation.Set, Operand.Embedded, Operand.H, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xCD */ new OpcodeInfo("SET 1,L", 0, Operation.Set, Operand.Embedded, Operand.L, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xCE */ new OpcodeInfo("SET 1,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 1, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xCF */ new OpcodeInfo("SET 1,A", 0, Operation.Set, Operand.Embedded, Operand.A, 1, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD0 */ new OpcodeInfo("SET 2,B", 0, Operation.Set, Operand.Embedded, Operand.B, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD1 */ new OpcodeInfo("SET 2,C", 0, Operation.Set, Operand.Embedded, Operand.C, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD2 */ new OpcodeInfo("SET 2,D", 0, Operation.Set, Operand.Embedded, Operand.D, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD3 */ new OpcodeInfo("SET 2,E", 0, Operation.Set, Operand.Embedded, Operand.E, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD4 */ new OpcodeInfo("SET 2,H", 0, Operation.Set, Operand.Embedded, Operand.H, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD5 */ new OpcodeInfo("SET 2,L", 0, Operation.Set, Operand.Embedded, Operand.L, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD6 */ new OpcodeInfo("SET 2,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 2, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xD7 */ new OpcodeInfo("SET 2,A", 0, Operation.Set, Operand.Embedded, Operand.A, 2, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD8 */ new OpcodeInfo("SET 3,B", 0, Operation.Set, Operand.Embedded, Operand.B, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xD9 */ new OpcodeInfo("SET 3,C", 0, Operation.Set, Operand.Embedded, Operand.C, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xDA */ new OpcodeInfo("SET 3,D", 0, Operation.Set, Operand.Embedded, Operand.D, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xDB */ new OpcodeInfo("SET 3,E", 0, Operation.Set, Operand.Embedded, Operand.E, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xDC */ new OpcodeInfo("SET 3,H", 0, Operation.Set, Operand.Embedded, Operand.H, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xDD */ new OpcodeInfo("SET 3,L", 0, Operation.Set, Operand.Embedded, Operand.L, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xDE */ new OpcodeInfo("SET 3,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 3, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xDF */ new OpcodeInfo("SET 3,A", 0, Operation.Set, Operand.Embedded, Operand.A, 3, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE0 */ new OpcodeInfo("SET 4,B", 0, Operation.Set, Operand.Embedded, Operand.B, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE1 */ new OpcodeInfo("SET 4,C", 0, Operation.Set, Operand.Embedded, Operand.C, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE2 */ new OpcodeInfo("SET 4,D", 0, Operation.Set, Operand.Embedded, Operand.D, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE3 */ new OpcodeInfo("SET 4,E", 0, Operation.Set, Operand.Embedded, Operand.E, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE4 */ new OpcodeInfo("SET 4,H", 0, Operation.Set, Operand.Embedded, Operand.H, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE5 */ new OpcodeInfo("SET 4,L", 0, Operation.Set, Operand.Embedded, Operand.L, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE6 */ new OpcodeInfo("SET 4,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 4, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xE7 */ new OpcodeInfo("SET 4,A", 0, Operation.Set, Operand.Embedded, Operand.A, 4, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE8 */ new OpcodeInfo("SET 5,B", 0, Operation.Set, Operand.Embedded, Operand.B, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xE9 */ new OpcodeInfo("SET 5,C", 0, Operation.Set, Operand.Embedded, Operand.C, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xEA */ new OpcodeInfo("SET 5,D", 0, Operation.Set, Operand.Embedded, Operand.D, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xEB */ new OpcodeInfo("SET 5,E", 0, Operation.Set, Operand.Embedded, Operand.E, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xEC */ new OpcodeInfo("SET 5,H", 0, Operation.Set, Operand.Embedded, Operand.H, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xED */ new OpcodeInfo("SET 5,L", 0, Operation.Set, Operand.Embedded, Operand.L, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xEE */ new OpcodeInfo("SET 5,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 5, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xEF */ new OpcodeInfo("SET 5,A", 0, Operation.Set, Operand.Embedded, Operand.A, 5, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF0 */ new OpcodeInfo("SET 6,B", 0, Operation.Set, Operand.Embedded, Operand.B, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF1 */ new OpcodeInfo("SET 6,C", 0, Operation.Set, Operand.Embedded, Operand.C, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF2 */ new OpcodeInfo("SET 6,D", 0, Operation.Set, Operand.Embedded, Operand.D, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF3 */ new OpcodeInfo("SET 6,E", 0, Operation.Set, Operand.Embedded, Operand.E, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF4 */ new OpcodeInfo("SET 6,H", 0, Operation.Set, Operand.Embedded, Operand.H, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF5 */ new OpcodeInfo("SET 6,L", 0, Operation.Set, Operand.Embedded, Operand.L, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF6 */ new OpcodeInfo("SET 6,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 6, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xF7 */ new OpcodeInfo("SET 6,A", 0, Operation.Set, Operand.Embedded, Operand.A, 6, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF8 */ new OpcodeInfo("SET 7,B", 0, Operation.Set, Operand.Embedded, Operand.B, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xF9 */ new OpcodeInfo("SET 7,C", 0, Operation.Set, Operand.Embedded, Operand.C, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFA */ new OpcodeInfo("SET 7,D", 0, Operation.Set, Operand.Embedded, Operand.D, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFB */ new OpcodeInfo("SET 7,E", 0, Operation.Set, Operand.Embedded, Operand.E, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFC */ new OpcodeInfo("SET 7,H", 0, Operation.Set, Operand.Embedded, Operand.H, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFD */ new OpcodeInfo("SET 7,L", 0, Operation.Set, Operand.Embedded, Operand.L, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
			/* 0xFE */ new OpcodeInfo("SET 7,(HL)", 0, Operation.Set, Operand.Embedded, Operand.MemoryHl, 7, (Flags)0, (Flags)0, (Flags)0, 16, 0),
			/* 0xFF */ new OpcodeInfo("SET 7,A", 0, Operation.Set, Operand.Embedded, Operand.A, 7, (Flags)0, (Flags)0, (Flags)0, 8, 0),
		};
	}
}

